generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("ANONYMOUS")
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          String    @default("USER")

  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updateAt  DateTime   @updatedAt
  accounts  Account[]
  sessions  Session[]
  Wishlist  Wishlist[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  category  String
  title     String
  slug      String   @unique @map("post_slug_idx")
  content   String
  preview   String
  banner    String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model Destination {
  id                String   @id @default(cuid())
  title             String
  slug              String   @unique @map("destination_slug_idx")
  tag               String
  preview           String
  content           String
  bannerImg         String
  destinationImages String[]
  coordinate        Json
  location          String

  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @updatedAt
  Wishlist  Wishlist[]
}

model Wishlist {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  destinationId String
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  destination Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}
